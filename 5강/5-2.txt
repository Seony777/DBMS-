데이터 정규화 (Data Normalization)
    중복 데이터를 최소화하고, 데이터 무결성을 유지하며
    CRUD시 발생할 수 있는 이상 현상을 방지하도록
    테이블을 설계하는 과정을 말합니다.

1. 중복 데이터 발생
    특정 데이터가 여러 곳에 중복되어 있으면, 어느 한 쪽에서 데이터를
    변경했을 때, 다른 쪽과 정보가 일치하지 않는 문제 발생 가능성

2. 이상 현상 (Anomalies)
    1) 삽입 이상 (Insertion Anomaly): 데이터를 새로 삽입해야 하는데
    어떤 이유로 인해, 불필요한 정보도 함께 삽입해야 하거나, 삽입이 어려워지는 현상
    2) 갱신 이상 (Update Anomaly): 중복 데이터가 여러 테이블(혹은 한 테이블 내에 여러 곳)에 존재할 때, 해당 데이터를 갱신할 때 일부만 수정되어 데이터가 불일치 하는 현상
    3) 삭제 이상 (Deletion Anomlay): 특정 데이터를 삭제할 때, 원치 않는 다른 데이터까지 함께 삭제되거나, 혹은 필요한 데이터가 손실되는 현상

3-1. 정규화의 장점
    1) 데이터 중복 최소화
    동일 정보가 여러 곳에 저장되지 않도록 하며, 저장 공간을 절약하고 데이터 일관성을 유지합니다.
    2) 데이터 무결성 향상
    삽입/갱신/삭제 시 오류나 충돌을 줄일 수 있습니다.
    3) 유연한 구조
    테이블 구조가 명확해지고, 의미별로 분리되므로 확장이나 수정이 필요할 때
    구조 변경이 더 쉽고 빠릅니다.
    4) Query 최적화
    적절한 정규화는 데이터를 효율적으로 저장하기 때문에, 원하는 정보를 빠르게 조회 할 수 있게 해줍니다.
    5) 업무 로직의 명확화
    테이블, 컬럼, 관계가 명확해지기 때문에, 로직에 맞는 데이터 구조를 보다 깨끗하게 설계 가능합니다.

3-2. 정규화의 단점 (주의사항)
    1) 테이블이 너무 잘게 쪼개지면, 조회할 때마다 JOIN 많이 사용해야 해서 성능 저하가 발생할 수 있어요.
    2) 따라서, 데이터베이스 설계를 할 때는 정규화와 성능 사이의 균형을 적절하게 맞추는 작업 필요

4. 정규화 과정 (Normal Form)
    여러 단계로 구분이 됩니다. 1차 ~ 3차 정규화를 우선적으로 숙지하는 것이 좋습니다. 
    
    1) 제1정규형 (1NF: First Normal Form)
    - 조건
    각 컬럼이 더 이상 나눌 수 없는 원자 값이어야 합니다.
    한 컬럼에 여러 값이 들어가면 안됩니다.

    -- items 컬럼에 여러 아이템을 쉼표로 구분하는건
    -- 1NF 위배입니다.
    CREATE TABLE orders (
    id INT PRIMARY KEY,
    customer_name VARCHAR(200),
    items VARCHAR(255) -- "상품 1, 상품 2, 상품 3..."
    );

    -- 1NF를 만족하도록 변경
    CREATE TABLE orders (
    id INT PRIMARY KEY,
    customer_name VARCHAR(200),
    item VARCHAR(50) -- "상품명" 하나만 나옵니다.
    );

    2) 제2정규형 (2NF: Second Normal Form)
    - 조건
    1 정규형을 만족해야 합니다.
    기본 키(Primary key)가 복합 키(Composite key)로 이루어진 테이블에서, 기본 키의 일부만으로
    종속되는 컬럼이 없어야 합니다.
    즉, 테이블의 모든 컬럼은 기본 키(전체)에 완전히 종속되어야 합니다.

        -- 여기서 product_name은 사실상 product_id에 종속되며
        -- order_id와는 무관할 수 있습니다.
        -- 지금 구조에서 기본 키를 order_id + product_id로 사용한다면
        -- 2NF 위배합니다.
        -- 왜냐하면 product_name은 product_id만으로 결정될 수 있기 때문입니다.(product_id에만 종속되기 때문)
        CREATE TABLE order_details (
            order_id INT,
            product_id INT,
            product_name VARCHAR(100),
            quantity INT,
            order_date DATE,
            PRIMARY KEY (order_id, product_id)
        );

        -- 2NF를 만족하도록 변경
        CREATE TABLE products (
            product_id INT PRIMARY KEY,
            product_name VARCHAR(100),
            price INT,
            ...
        );
        -- 2NF를 만족하도록 변경
        CREATE TABLE order_details (
            order_id INT,
            product_id INT,
            quantity INT,
            order_date DATE,
            PRIMARY KEY (order_id, product_id)
        );

    3) 제3정규형 (3NF: Third Normal Form)
    - 조건
    2정규형을 만족해야 합니다.
    기본 키가 아닌 컬럼이, 기본 키가 아닌 다른 컬럼에 종속되면 안됩니다. (이행종속 제거)
    모든 컬럼은 기본 키에 종속되어야 합니다.

    -- 여기서 department_name은 사실상 department_id로부터 결정
    -- department_id는 employee_id에 종속되어 있지만
    -- department_name은 employee_id가 아닌 department_id에 종속되는 상황이 발생
    -- 3NF 위배합니다.
    CREATE TABLE employees (
        employee_id INT PRIMARY KEY,
        employee_name VARCHAR(200),
        department_id INT,
        department_name VARCHAR(200)
    );

    -- 3NF를 만족하도록 변경
    CREATE TABLE departments (
        department_id INT PRIMARY KEY,
        department_name VARCHAR(200)
    );
    -- 3NF를 만족하도록 변경
    CREATE TABLE employees (
        employee_id INT PRIMARY KEY,
        employee_name VARCHAR(200),
        department_id INT,
        FOREIGN KEY (department_id) REFERENCES departments(department_id)
    );

    4) BCNF (Boyce-Codd Normal Form)
    3NF보다 조금 더 엄격한 형태의 정규화입니다.

    5) 제4정규형 (4NF), 제5정규형(5NF)
    더 복잡한 상황에서 사용됩니다.
    현실적으로는 4NF나 5NF까지 요구되는 경우는 거의 없습니다.

